#include<stdio.h>
#include<stdlib.h>

struct stack
{

    int size;
    int top;
    int * arr;                       ///Daffodil International University in CSE
                                     ///Rafiul Islam
                                     ///01701-729512
};

int isEmpty(struct stack* ptr)
{

    if(ptr->top > -1)
    {
        return 0;
    }
    else
    {

        return 1;
    }
}

int isFull(struct stack* ptr)
{


    if(ptr->top > ptr->size-1)
    {
        return 1;
    }
    else
    {

        return 0;
    }
}

void push(struct stack* ptr, int val)
{

    if(isFull(ptr))
    {

        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }


    else
    {
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }


}

void pop(struct stack* ptr)
{

    if(isEmpty(ptr))
    {

        printf("Stack Underflow! Cannot pop from the stack\n");
    }

    else
    {

        ptr->top--;
    }


}

void TraversalStack(struct stack* ptr)
{

    for(int i = 0; i <= ptr->top; i++)
    {

        printf("%d\n",ptr->arr[i]);
    }



}

   void peak(struct stack* ptr)
  {
    int j = 1;

    printf("The Peak Operation is started here!\n\n");
    if(ptr->top < 0)
    {

        printf("Stack is Empty");
    }

    else
    {



        for(int i = ptr->top; i >= 0; i--)
        {


            printf("%d The value of Position %d\n",ptr->arr[i], j);

            j++;
        }

    }
}

  int stackTop(struct stack * ptr){

      if(ptr->top < 0){
        return -1;
      }
      else{
        return ptr->arr[ptr->top];
      }

  }

     int stackBotom(struct stack * ptr){

      if(ptr->top < 0){
        return -1;
      }
      else{
        return ptr->arr[0];
      }

  }

int main()
{
    struct stack *sp = (struct stack *)malloc(sizeof(struct stack));
    sp->size = 20;
    sp->top = -1;
    sp->arr = (int *) malloc(sp->size* sizeof(int));
     printf("Stack has been Created Successfully\n");
     push(sp,3);
     push(sp,60);
     push(sp,911);
     push(sp,94);
     push(sp,97);


     pop(sp);
     pop(sp);
    // pop(sp);
    // pop(sp);
    //TraversalStack(sp);
    //printf("%d",sp->top);

    peak(sp);
    printf("\n\nThe Top Most Value in this stack is %d\n", stackTop(sp));
    printf("The Bottom Most Value in this stack is %d\n", stackBotom(sp));

    return 0;
}
